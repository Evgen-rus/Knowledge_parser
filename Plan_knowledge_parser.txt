[MODE: PLAN]

## План разработки утилиты для парсинга Google Docs и Google Sheets в Markdown

### Общая структура проекта

```
knowledge_parser/
├── data/
│   ├── docs/        # Markdown-файлы из Google Docs
│   └── sheets/      # Markdown-файлы из Google Sheets
├── parse_google_doc.py
├── parse_google_sheet.py
├── utils.py
├── config.py
├── requirements.txt
├── README.md
```

### Функциональные требования

1. Подключение к Google API
2. Загрузка документов по ID
3. Прямое преобразование документов в Markdown 
4. Очистка от метаданных и служебной информации
5. Сохранение в файлы с правильным именованием

### Технические зависимости

Проект будет использовать следующие библиотеки:
- `google-api-python-client` - для доступа к Google API
- `google-auth` и `google-auth-oauthlib` - для аутентификации
- `gspread` - для работы с Google Sheets
- `python-slugify` - для преобразования названий в корректные имена файлов

### Детальный план реализации

#### 1. Файл `config.py`

Будет содержать:
- Пути к папкам с данными
- Настройки подключения к Google API
- Конфигурацию очистки документов (паттерны для исключения)

#### 2. Файл `utils.py`

Будет содержать утилитарные функции:
- `slugify_filename(title)` - преобразование названия в валидное имя файла
- `save_markdown(content, filename, directory)` - сохранение Markdown в файл
- `clean_metadata(text)` - очистка метаданных по шаблонам
- `format_as_markdown(content)` - форматирование текста по правилам Markdown

#### 3. Файл `parse_google_doc.py`

Будет содержать функции:
- `authenticate_docs()` - аутентификация в Google Docs API
- `get_document(document_id)` - загрузка документа по ID
- `extract_document_title(document)` - извлечение заголовка документа
- `process_paragraph(paragraph)` - обработка абзаца документа
- `process_table(table)` - обработка таблицы в документе
- `gdoc_to_markdown(document)` - преобразование структуры документа в Markdown
- `main()` - точка входа, обрабатывает документы по списку ID

#### 4. Файл `parse_google_sheet.py`

Будет содержать функции:
- `authenticate_sheets()` - аутентификация в Google Sheets API
- `get_sheet(sheet_id)` - загрузка таблицы по ID
- `extract_sheet_title(sheet)` - извлечение названия таблицы
- `sheet_to_markdown(data)` - преобразование данных таблицы в Markdown
- `main()` - точка входа, обрабатывает таблицы по списку ID

#### 5. Файл `requirements.txt`

Будет содержать список зависимостей:
```
google-api-python-client==2.97.0
google-auth==2.23.0
google-auth-oauthlib==1.1.0
gspread==5.10.0
python-slugify==8.0.1
```

### IMPLEMENTATION CHECKLIST:

1. Создать базовую структуру проекта (папки и пустые файлы)
2. Написать `config.py` с базовыми настройками
3. Реализовать функции аутентификации в Google API в обоих парсерах
4. Реализовать базовые утилитарные функции в `utils.py`
5. Разработать функцию `clean_metadata()` для очистки метаданных
6. Реализовать функции для преобразования Google Doc в Markdown
7. Реализовать функции для преобразования Google Sheet в Markdown
8. Добавить функцию сохранения результатов в файлы
9. Создать паттерны для очистки метаданных (дата, автор, версия, и т.д.)
10. Реализовать функцию определения и форматирования заголовков
11. Добавить логику обработки таблиц в документах
12. Добавить логику обработки списков и форматирования текста
13. Реализовать функцию основного цикла для обработки списка документов
14. Написать README.md с инструкцией по использованию
15. Протестировать на реальных документах и отладить ошибки

Этот план обеспечивает поэтапную разработку утилиты с фокусом на прямое преобразование в Markdown без промежуточных форматов, что соответствует выбранному подходу.
