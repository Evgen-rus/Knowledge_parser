## План разработки утилиты для парсинга Google Docs и Google Sheets в Markdown (обновленный)

### Общая структура проекта

```
knowledge_parser/
├── credentials/
│   ├── .gitkeep
│   └── sheets-data-bot-b8f4cc6634fc.json
├── data/
│   ├── docs/        # Markdown-файлы из Google Docs
│   └── sheets/      # Markdown-файлы из Google Sheets
├── parse_google_doc.py
├── parse_google_sheet.py
├── utils.py
├── config.py
├── requirements.txt
├── README.md
```

### Функциональные требования

1. Использование существующих учётных данных для подключения к Google API
2. Загрузка документов по ID
3. Прямое преобразование документов в Markdown 
4. Очистка от метаданных и служебной информации
5. Удаление секции "Термины" полностью, включая заголовок и список терминов
6. Сохранение в файлы с правильным именованием

### Технические зависимости

Проект будет использовать следующие библиотеки:
- `google-api-python-client` - для доступа к Google API
- `google-auth` и `google-auth-oauthlib` - для аутентификации
- `gspread` - для работы с Google Sheets
- `python-slugify` - для преобразования названий в корректные имена файлов

### Детальный план реализации

#### 1. Файл `config.py`

Будет содержать:
- Константу `CREDENTIALS_FILE` с путём к файлу учётных данных
- Пути к папкам с данными (`DOCS_DIR`, `SHEETS_DIR`)
- Настройки области доступа к API (`SCOPES`)
- Конфигурацию очистки документов (паттерны для исключения)
- Специальный паттерн для обнаружения и удаления секции "Термины"

```python
# Паттерны для очистки метаданных
METADATA_PATTERNS = [
    r"Конфиденциально\s*",
    r"Автор:.*",
    r"Для кого предназначено:.*",
    r"Дата издания:.*",
    r"Версия:.*",
]

# Паттерн для удаления секции "Термины"
TERMS_SECTION_PATTERN = r"Термины:[\s\S]*?(?=\n\s*\n\S|\Z)"
```

#### 2. Файл `utils.py`

Будет содержать утилитарные функции:
- `slugify_filename(title)` - преобразование названия в валидное имя файла
- `save_markdown(content, filename, directory)` - сохранение Markdown в файл
- `clean_metadata(text, patterns)` - очистка метаданных по шаблонам
- `remove_terms_section(text)` - удаление секции "Термины" из текста
- `format_as_markdown(content)` - форматирование текста по правилам Markdown
- `create_directories()` - создание необходимых директорий, если они не существуют

#### 3. Файл `parse_google_doc.py`

Будет содержать функции:
- `authenticate_docs()` - аутентификация в Google Docs API с использованием существующих учётных данных
- `get_document(document_id)` - загрузка документа по ID
- `extract_document_title(document)` - извлечение заголовка документа
- `process_paragraph(paragraph)` - обработка абзаца документа
- `process_table(table)` - обработка таблицы в документе
- `gdoc_to_markdown(document)` - преобразование структуры документа в Markdown
- `parse_doc(document_id)` - основная функция парсинга документа
- `main()` - точка входа, обрабатывает документы по списку ID

#### 4. Файл `parse_google_sheet.py`

Будет содержать функции:
- `authenticate_sheets()` - аутентификация в Google Sheets API с использованием существующих учётных данных
- `get_sheet(sheet_id)` - загрузка таблицы по ID
- `extract_sheet_title(sheet)` - извлечение названия таблицы
- `sheet_to_markdown(data)` - преобразование данных таблицы в Markdown
- `parse_sheet(sheet_id)` - основная функция парсинга таблицы
- `main()` - точка входа, обрабатывает таблицы по списку ID

#### 5. Файл `requirements.txt`

Будет содержать список зависимостей:
```
google-api-python-client==2.97.0
google-auth==2.23.0
google-auth-oauthlib==1.1.0
gspread==5.10.0
python-slugify==8.0.1
```

### IMPLEMENTATION CHECKLIST:

1. Создать недостающие директории (`data/docs`, `data/sheets`)
2. Написать `config.py` с учётом пути к существующему файлу учётных данных и паттернами для очистки
3. Реализовать функцию `create_directories()` в `utils.py` и проверить наличие всех необходимых директорий
4. Реализовать функции аутентификации в Google API с использованием существующих учётных данных
5. Реализовать базовые утилитарные функции в `utils.py` (slugify, save_markdown)
6. Разработать функцию `clean_metadata()` для очистки метаданных
7. **Разработать функцию `remove_terms_section()` для обнаружения и удаления секции "Термины" с заголовком и списком терминов**
8. Создать паттерны для очистки метаданных (дата, автор, версия, и т.д.)
9. Реализовать функции для преобразования Google Doc в Markdown:
   - Обработка заголовков
   - Обработка основного текста
   - Обработка форматирования (жирный, курсив)
   - Обработка списков
10. Реализовать функции для преобразования Google Sheet в Markdown:
    - Преобразование данных в таблицу Markdown
    - Обработка заголовков таблицы
11. Реализовать функцию определения и форматирования заголовков
12. Добавить логику обработки таблиц в документах
13. Реализовать функцию основного цикла для обработки списка документов и таблиц
14. **Добавить проверку и тестирование корректности удаления секции "Термины"**
15. Написать README.md с инструкцией по использованию
16. Протестировать на реальных документах и отладить ошибки

Этот обновленный план включает специальные шаги для обнаружения и удаления секции "Термины" из документов, чтобы она не попадала в итоговые Markdown-файлы.
